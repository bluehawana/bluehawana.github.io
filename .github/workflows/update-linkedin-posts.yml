name: Update LinkedIn Posts

on:
  schedule:
    # Run every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch:
    # Allow manual triggering
    inputs:
      force_update:
        description: 'Force update even if no changes'
        required: false
        default: 'false'

jobs:
  update-posts:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: |
          npm install node-fetch cheerio xml2js
          
      - name: Create LinkedIn sync script
        run: |
          cat > sync-linkedin.js << 'EOF'
          const fs = require('fs').promises;
          const fetch = require('node-fetch');
          
          async function updateLinkedInPosts() {
            try {
              console.log('üîÑ Starting LinkedIn post sync...');
              
              // Method 1: Try RSS feed
              try {
                const rssUrl = 'https://api.rss2json.com/v1/api.json?rss_url=https://www.linkedin.com/in/hzl/recent-activity/';
                const response = await fetch(rssUrl);
                const data = await response.json();
                
                if (data.status === 'ok' && data.items && data.items.length > 0) {
                  const posts = data.items.slice(0, 5).map(item => ({
                    content: cleanContent(item.description || item.title),
                    date: new Date(item.pubDate).toISOString().split('T')[0],
                    url: item.link || 'https://www.linkedin.com/in/hzl',
                    tags: extractTags(item.description || item.title),
                    source: 'rss_auto'
                  }));
                  
                  await fs.writeFile('data/linkedin-posts.json', JSON.stringify(posts, null, 2));
                  console.log('‚úÖ RSS sync successful - updated with', posts.length, 'posts');
                  return true;
                }
              } catch (error) {
                console.warn('‚ö†Ô∏è RSS sync failed:', error.message);
              }
              
              // Method 2: Keep existing posts if RSS fails
              try {
                const existingData = await fs.readFile('data/linkedin-posts.json', 'utf8');
                const existingPosts = JSON.parse(existingData);
                
                // Add a timestamp to show the sync attempt
                const updatedPosts = existingPosts.map((post, index) => {
                  if (index === 0) {
                    return {
                      ...post,
                      lastSyncAttempt: new Date().toISOString()
                    };
                  }
                  return post;
                });
                
                await fs.writeFile('data/linkedin-posts.json', JSON.stringify(updatedPosts, null, 2));
                console.log('‚úÖ Kept existing posts with sync timestamp');
                return true;
                
              } catch (error) {
                console.error('‚ùå Failed to maintain existing posts:', error);
                return false;
              }
              
            } catch (error) {
              console.error('‚ùå LinkedIn sync failed:', error);
              return false;
            }
          }
          
          function cleanContent(html) {
            if (!html) return '';
            return html
              .replace(/<[^>]*>/g, '')
              .replace(/&nbsp;/g, ' ')
              .replace(/&amp;/g, '&')
              .replace(/&lt;/g, '<')
              .replace(/&gt;/g, '>')
              .replace(/&quot;/g, '"')
              .trim()
              .substring(0, 500);
          }
          
          function extractTags(content) {
            if (!content) return ['Update'];
            
            const hashtags = content.match(/#\w+/g);
            if (hashtags) {
              return hashtags.map(tag => tag.substring(1));
            }
            
            const keywords = ['development', 'coding', 'tech', 'programming', 'software', 'web', 'app', 'linkedin'];
            const foundKeywords = keywords.filter(keyword => 
              content.toLowerCase().includes(keyword)
            );
            
            return foundKeywords.length > 0 ? foundKeywords : ['Update'];
          }
          
          updateLinkedInPosts().then(success => {
            process.exit(success ? 0 : 1);
          });
          EOF
          
      - name: Run LinkedIn sync
        run: node sync-linkedin.js
        
      - name: Check for changes
        id: changes
        run: |
          if git diff --quiet data/linkedin-posts.json; then
            echo "No changes detected"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi
          
      - name: Commit and push changes
        if: steps.changes.outputs.has_changes == 'true' || github.event.inputs.force_update == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add data/linkedin-posts.json
          git commit -m "üîÑ Auto-update LinkedIn posts - $(date '+%Y-%m-%d %H:%M:%S')"
          git push
          
      - name: Create sync report
        if: always()
        run: |
          echo "## LinkedIn Sync Report" >> $GITHUB_STEP_SUMMARY
          echo "- **Date**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Changes**: ${{ steps.changes.outputs.has_changes }}" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "data/linkedin-posts.json" ]; then
            POST_COUNT=$(jq length data/linkedin-posts.json)
            echo "- **Posts Count**: $POST_COUNT" >> $GITHUB_STEP_SUMMARY
          fi